version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: sharing_caring_db
    environment:
      POSTGRES_DB: sharing_caring
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Valkey Cache & Streams (Redis-compatible)
  valkey:
    image: valkey/valkey:7.2-alpine
    container_name: sharing_caring_valkey
    ports:
      - "6380:6379"
    volumes:
      - valkey_data:/data
      - ./valkey.conf:/usr/local/etc/valkey/valkey.conf:ro
    command: ["valkey-server", "/usr/local/etc/valkey/valkey.conf"]
    healthcheck:
      test: ["CMD", "valkey-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  # Telegram Bot Application
  bot:
    build: .
    container_name: sharing_caring_bot
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres123@postgres:5432/sharing_caring
      - REDIS_URL=redis://valkey:6379/0
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_PHONE_NUMBER=${TWILIO_PHONE_NUMBER}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_BUCKET_NAME=${AWS_BUCKET_NAME}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - SECRET_KEY=${SECRET_KEY}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - ENVIRONMENT=production
      - STORAGE_TYPE=local
    depends_on:
      postgres:
        condition: service_healthy
      valkey:
        condition: service_healthy
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    command: ["python", "-m", "src.bot.main"]
    restart: unless-stopped

  # FastAPI Web Interface (optional - for admin dashboard)
  web:
    build: .
    container_name: sharing_caring_web
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres123@postgres:5432/sharing_caring
      - REDIS_URL=redis://valkey:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=production
    depends_on:
      postgres:
        condition: service_healthy
      valkey:
        condition: service_healthy
    command: ["uvicorn", "src.api.main:app", "--host", "0.0.0.0", "--port", "8000"]
    restart: unless-stopped
    profiles:
      - web

volumes:
  postgres_data:
  valkey_data: